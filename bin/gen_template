#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'erb'

class Problem
  def initialize(name)
    @name = name.split('.').last.strip
    @number = name.split('.').first.strip
  end

  def module_name
    @name.split(' ').join
  end

  def class_name
    module_name
  end

  def filename
    "#{@number.to_s.rjust(4, '0')}_#{@name.split(' ').map(&:downcase).join('_')}"
  end

  def filename_spec
    "#{filename}_spec"
  end

  def build
    result = ERB.new(File.read(File.join(File.dirname(__FILE__), '../assets/problem.erb'))).result(binding)
    File.write(File.join(File.dirname(__FILE__), "../lib/leetcode_ruby/#{filename}.rb"),
               result, mode: 'w+')
  end

  def build_spec
    result = ERB.new(File.read(File.join(File.dirname(__FILE__), '../assets/problem_spec.erb'))).result(binding)
    File.write(File.join(File.dirname(__FILE__), "../spec/#{filename_spec}.rb"),
               result, mode: 'w')
  end

  def append_require
    File.write(File.join(File.dirname(__FILE__), '../lib/leetcode_ruby.rb'),
               "require_relative 'leetcode_ruby/#{filename}'\n", mode: 'a+')
  end
end

class MyCLI < Thor
  desc 'new', 'generate problem template'
  option :name, required: true, aliases: :n, banner: '<problem name>'
  def new
    problem = Problem.new(options[:name])

    puts "generate #{problem.filename}.rb"
    problem.build
    puts "generate #{problem.filename_spec}.rb"
    problem.build_spec
    puts "add \"require_relative '#{problem.filename}'\" to lib/leetcode_ruby.rb"
    problem.append_require
  end
end

MyCLI.start(ARGV)
